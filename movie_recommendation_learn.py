# -*- coding: utf-8 -*-
"""Movie_Recommendation_Learn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jNiub6zyakKoZue6HzuS1R5gwLBOLg0U

**WORK FLOW**
Data -> Data-Preprocessing -> Feature Extraction (Strings into Numericals) -> User Input -> Cosine Similarity -> Output

Feature Extraction: Find the Similarity Score (Similarity Confidence Score) between the movies with each other

Cosine Similarity: to find the similarity between the vector (Each movie is converted into a kind of a vector) => Take userInput and compare with scores.

It also helps us to find similarity between different data points
"""

import numpy as np
import pandas as pd
import difflib # library to find the close match (without spelling mistake) from the user input and compare with dataset
from sklearn.feature_extraction.text import TfidfVectorizer #to convert textual data into numerical values (feature vectors)
from sklearn.metrics.pairwise import cosine_similarity #to find similarity confidence score

# We compare user' inputted movies's similarity score with the database and show the output

movies_data = pd.read_csv('/content/movies.csv')
movies_data.head()

# Rows and Columns - Number of,
movies_data.shape

# Selecting the relevant features - X and Y i.e feature Selection
# (Genre, Kwywords, Title, Tagline, Cast and Director)
selected_features = ['genres', 'keywords', 'tagline', 'cast', 'director']
print(selected_features)

# Replace Null values in selected_features
for feature in selected_features:
    movies_data[feature] = movies_data[feature].fillna('') #fill empty boxes with null string

# Combining sleected_features
combined_features = movies_data['genres']+' '+movies_data['keywords']+' '+movies_data['tagline']+' '+movies_data['cast']+' '+movies_data['director']
print(combined_features)

# Converting Textual Data into Numericals(Feature Vectors)

# Create an instance of it
vectorizer = TfidfVectorizer()

# Now we convert it into numericals
feature_vectors = vectorizer.fit_transform(combined_features)
print(feature_vectors)

# Now we find cosine similarity
similarity = cosine_similarity(feature_vectors)

# Now it will go through all feature_vectors(numerical values of selected_features) and find which values are similar to each other
# - how it works is it will first compare  first movie with all the other movie and then give a score for the first movie, similariy all the movies are compared and thus given a single simmilairy score

print(similarity)
similarity.shape

# create a list of all movies names of dataset
list_of_all_titles = movies_data['title'].tolist()
print(list_of_all_titles)

# User Input Movie Name
movie_name = input("Enter Movie Name: ")

# Finding close match for user input
find_close_match = difflib.get_close_matches(movie_name , list_of_all_titles)
print(find_close_match)

# Now take the first movie from find_close_match and compare the rest of movies for similarity score
close_match = find_close_match[0]
print(close_match)

# and now find the index of the movie
movie_index = movies_data[movies_data.title == close_match]['index'].values[0]
print(movie_index)

# getiing list of similar movies based on index number
similarity_score = list(enumerate(similarity[movie_index]))
# the movies having simmilairyt score value which is equal to movie index(iron man) will be taken
print(similarity_score)
# len(similarity_score)

# find the highest similarity score - sort it now
sorted_similar_scores = sorted(similarity_score, key=lambda x:x[1], reverse=True)
print(sorted_similar_scores)

# Display names

print("Suggested Movies are: \n")
i = 1;
for movie in sorted_similar_scores:
    index = movie[0]
    title_from_index = movies_data[movies_data.index == index]['title'].values[0]
    if (i<11):
        print(i, ' - ', title_from_index)
        i+=1

# All Code in One Cell - FINAL
movie_name = input("Enter Movie Name: ")
find_close_match = difflib.get_close_matches(movie_name , list_of_all_titles)

close_match = find_close_match[0]
movie_index = movies_data[movies_data.title == close_match]['index'].values[0]

similarity_score = list(enumerate(similarity[movie_index]))
sorted_similar_scores = sorted(similarity_score, key=lambda x:x[1], reverse=True)

print("Suggested Movies are: \n")
i = 1;
for movie in sorted_similar_scores:
    index = movie[0]
    title_from_index = movies_data[movies_data.index == index]['title'].values[0]
    if (i<11):
        print(i, ' - ', title_from_index)
        i+=1